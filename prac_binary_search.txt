def binarysearch(arr, x, low, high):
    while low <= high:
        mid = low + (high - low) // 2
        if x == arr[mid]:
            return mid
        elif x > arr[mid]:
            low = mid + 1
        else:
            high = mid - 1
    return -1

def rbinarysearch(arr, x, low, high):
    if low <= high:
        mid = low + (high - low) // 2
        if x == arr[mid]:
            return mid
        elif x < arr[mid]:
            return rbinarysearch(arr, x, mid + 1, high)
        else:
            return rbinarysearch(arr, x, low, mid - 1)
    else:
        return -1

def fibsearch(arr, x, n):
    f2, f1 = 0, 1
    fib = f1 + f2

    while fib < n:
        f2, f1 = f1, fib
        fib = f1 + f2

    off = -1
    while fib > 1:
        i = min(off + f2, n - 1)
        if arr[i] < x:
            fib, f1, f2, off = f1, f2, fib - f1, i
        elif arr[i] > x:
            fib, f1, f2 = f2, f1 - f2, fib - f1
        else:
            return i

    if f1 and arr[n - 1] == x:
        return n - 1
    return -1

def insert(dictionary, name):
    number = input(f"Enter {name}'s Number: ")
    dictionary[name] = number

def create():
    name = input('Enter Name: ')
    number = input('Enter Number: ')
    dict1[name] = number

def absent(dictionary, name):
    print(f'{name} is not present in phonebook')
    insert(dictionary, name)
    print(f'{name} has been inserted in phonebook')

# Main
flag = 0
dict1 = {}

while flag==0:
    
        ch = int(input('Welcome To Phonebook\nPlease Enter Your Choice:\n1.Create\t2.Search\n3.Display\t4.Delete\n5.Exit \n'))

        match ch:
            case 1:
                create()
            case 2:
                nm = input('Enter Name to search ')
                ch1 = int(input('Enter the operation you want to perform:\n1.Iterative Binary Search\n2.Recursive Binary Search\n3.Fibonacci Search '))

                match ch1:
                    case 1:
                        result = binarysearch(list(sorted(dict1)), nm, 0, len(list(dict1)) - 1)
                        print('Binary using iterative')
                        if result != -1:
                          print(f'{nm} is present at index {result} in phonebook')
                          print(f"{nm}'s number is {dict1[nm]}")
                        else:
                          absent(dict1, nm)
                    case 2:
                        result1 = rbinarysearch(list(sorted(dict1)), nm, 0, len(list(dict1)) - 1)
                        print('Binary using recursive')
                        if result1 != -1:
                          print(f'{nm} is present at index {result1} in phonebook')
                          print(f"{nm}'s number is {dict1[nm]}")
                        else:
                          absent(dict1, nm)
                    case 3:
                        result2 = fibsearch(list(sorted(dict1)), nm, len(list(dict1)))
                        print('Fibonacci')
                        if result2 != -1:
                          print(f'{nm} is present at index {result2} in phonebook')
                          print(f"{nm}'s number is {dict1[nm]}")
                        else:
                          absent(dict1, nm)
            case 3:
                print('Phonebook:\n', dict1)
                count = 1
                print('\t Name\t\t Number')
                for i in dict1:
                    print(f'{count}.\t {str(i)} \t\t {dict1[i]}')
                    count += 1
            case 4:
                nm_del = input('Enter the name of the contact you want to delete ')
                if nm_del in dict1:
                  del dict1[nm_del]
                  print(f'{nm_del} has been successfully deleted')
                else:
                  print(f'{nm_del} does not exist')
            case 5:
                flag = 1
            case _:
                print('Invalid choice')
    

        
  




