def display_longest_word(s):
    words = s.split()
    longest_word = max(words, key=len)
    print(f"The longest word in the string is: {longest_word}")

def char_frequency(s, char):
    frequency = s.count(char)
    print(f"The frequency of '{char}' in the string is: {frequency}")

def is_palindrome(s):
    reversed_s = s[::-1]
    if s.lower() == reversed_s.lower():
        print("The string is a palindrome.")
    else:
        print("The string is not a palindrome.")

def index_of_substring(s, substring):
    index = s.find(substring)
    if index != -1:
        print(f"The index of the first appearance of '{substring}' is: {index}")
    else:
        print(f"'{substring}' not found in the string.")

def count_word_occurrences(s):
    words = s.split()
    word_occurrences = {}
    for word in words:
        word_occurrences[word] = word_occurrences.get(word, 0) + 1

    print("Occurrences of each word in the string:")
    for word, count in word_occurrences.items():
        print(f"{word}: {count}")

# Taking user input
input_string = input("Enter a string: ")
display_longest_word(input_string)
char_to_find = input("Enter a character to find its frequency: ")
char_frequency(input_string, char_to_find)
substring_to_find = input("Enter a substring to find its index: ")
index_of_substring(input_string, substring_to_find)
count_word_occurrences(input_string)
pal=input("Enter A Word To Check Palindrome: ")
is_palindrome(pal)



