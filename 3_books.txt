#include <iostream>
#include <vector>
#include <chrono>
#include <memory>

using namespace std;


struct Node {
    string name;
    vector<unique_ptr<Node>> children;
    Node(string n) : name(move(n)) {}
};


void printNodes(const Node* node, int depth = 0) {
    for (int i = 0; i < depth; ++i)
        cout << " ";
    cout << "- " << node->name << endl;
    for (const auto& child : node->children)
        printNodes(child.get(), depth + 1);
}

int main() {
    auto start = chrono::high_resolution_clock::now(); 
    
    
    auto book = make_unique<Node>("Book");
    
    
    book->children.emplace_back(make_unique<Node>("Chapter 1"));
    book->children.emplace_back(make_unique<Node>("Chapter 2"));
    book->children[0]->children.emplace_back(make_unique<Node>("Section 1.1"));
    book->children[0]->children.emplace_back(make_unique<Node>("Section 1.2"));
    book->children[0]->children[0]->children.emplace_back(make_unique<Node>("Subsection 1.1.1"));
    book->children[0]->children[0]->children.emplace_back(make_unique<Node>("Subsection 1.1.2"));
    book->children[0]->children[1]->children.emplace_back(make_unique<Node>("Subsection 1.2.1"));
    book->children[1]->children.emplace_back(make_unique<Node>("Section 2.1"));

    auto stop = chrono::high_resolution_clock::now(); 
    
    
    printNodes(book.get());
    

    auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);
    cout << "Time Complexity: O(n)" << endl;
    cout << "Space Complexity: O(n)" << endl;
    cout << "Time taken by function: " << duration.count() << " microseconds" << endl;
    
    return 0;
}
